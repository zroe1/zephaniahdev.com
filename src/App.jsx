import React, { useState, useRef, useEffect } from 'react';
import { Canvas, useFrame, useThree } from '@react-three/fiber'
import { OrbitControls, Stars } from '@react-three/drei'
import CenterText from './components/CenterText'
import ColorSelectors from './components/ColorSelector';
import InstructionText from './components/InstructionText';
import BottomLinks from './components/BottomLinks';
import Menu from './components/Menu'
import ReturnToHomeBtn from './components/ReturnToHomeBtn/ReturnToHomeBtn';
import './index.css'

function Box({color, rotation}) {
  const [totalRotation, setTotalRotation] = useState(0);

  useEffect (() => {
    // console.log("useEffect worked!");
    setTotalRotation(0);
  }, [rotation])

  const setRotation = (newRotation) => {
    setTotalRotation(totalRotation + newRotation)
  }

  const meshRef = useRef()
  useFrame(() => {
    if (!meshRef.current) {
      return;
    }
    meshRef.current.rotation.y += rotation;
    setRotation(rotation);
  })

  //  sets the arguments for the mesh depending on the window size
  let meshArgs;
  if (window.innerWidth < 600) {
    meshArgs = [2.0, .6, 16, 100];
  } else {
    meshArgs = [2.2, .7, 16, 100];
  }

  if (totalRotation > 9.5) {
    return null;
  }
  return (
    <mesh ref={meshRef}>
      <torusBufferGeometry attach='geometry' args={meshArgs}/>
      <meshBasicMaterial attach='material' color={color} wireframe/>
    </mesh>
  );
}


export default function App() {
  const [backgroundColor, setBackgroundColor] = useState("#000000")
  const [ShapeColor, setShapeColor] = useState("#ffffff")
  const [ShapeRotation, setShapeRotation] = useState(0)
  const [TextColor, setTextColor] = useState("#ffffff")
  const [lastTextValue, setLastTextValue] = useState("#ffffff");

  const setBackground  = (newBackgroundColor) => {
    setBackgroundColor(newBackgroundColor)
  }
  const setShape = (newShapeColor) => {
    setShapeColor(newShapeColor)
  }
  const setText = (newTextColor) => {
    setTextColor(newTextColor)
  }

  const hex_to_grayscaleVal = (hex) => {
    // Note to self: the following 7 lines were generated by chat GPT
    // Extract the RGB values
    let bigint = parseInt(hex.substring(1), 16);
    let red = (bigint >> 16) & 255;
    let green = (bigint >> 8) & 255;
    let blue = bigint & 255;

    // Convert RGB to grayscale using the formula
    let grayscaleValue = Math.round(0.299 * red + 0.587 * green + 0.114 * blue);
    return grayscaleValue;
  }

  const setRotation = (newRotation) => {
    // console.log("I am here!!");
    setShapeRotation(newRotation);
    if (newRotation != 0) {
        setLastTextValue(TextColor);
        // console.log("Last text value {}", lastTextValue)
        // console.log(hex_to_grayscaleVal(ShapeColor))
        if (hex_to_grayscaleVal(ShapeColor) > 150) {
          setTextColor("#000000");
        } else {
          setTextColor("#ffffff");
        }
    }
  }

  // This windowHeight piece of state and UseEffect were generated by GTP-4 so I am 
  // keeping the somewhat unnecessary comments for self-reference
  const [windowHeight, setWindowHeight] = useState(undefined);
  useEffect(() => {
    const handleResize = () => {
      console.log(window.innerHeight)
      setWindowHeight(window.innerHeight);
    };

    // Attach the event listener
    window.addEventListener('resize', handleResize);

    handleResize();

    // Clean up the event listener when the component is unmounted
    return () => {
      window.removeEventListener('resize', handleResize);
    };
  }, []); // Empty array prevents errors!

  const backgroundStyle = {
    backgroundColor: backgroundColor,
    height: windowHeight,
  }
  const centerTextStyle = {
    display: 'none',
  }

  const goHome = () => {
    // console.log("last text value...", lastTextValue)
    setShapeRotation(0);
    setTextColor(lastTextValue);
  }

  return (
    <div className='root-container' style={backgroundStyle}>
      <InstructionText color={TextColor}/>
      <BottomLinks />
      <ColorSelectors color={TextColor} handleBackgroundChange={setBackground} handleShapeChange={setShape} handleTextChange={setText}/>
      {ShapeRotation == 0 && <CenterText color={TextColor} handleRotationChange={setRotation}/>}
      {ShapeRotation != 0 && <><Menu menuBackground={ShapeColor} textColor={TextColor}/> <ReturnToHomeBtn handleGoHome={goHome}/></>}
      <Canvas >
        <OrbitControls />
        <Stars/>
        <ambientLight intensity={0.5} />
        <spotLight position={[10, 15, 10]} angle={0.3} />
        <Box color={ShapeColor} rotation={ShapeRotation}/>
      </Canvas>
    </div>
  )
}
